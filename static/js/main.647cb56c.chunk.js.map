{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["White","children","className","Colors","App","useState","srcUrl","setSrcUrl","json","setJson","err","setErr","colorized","useMemo","split","map","char","index","Color","useEffect","hash","window","location","slice","fetch","then","resp","JSON","stringify","catch","message","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAGMA,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnB,OAAO,sBAAMC,UAAU,UAAhB,SAA2BD,KAwB9BE,EAAS,CAtBC,SAAC,GAAkB,IAAhBF,EAAe,EAAfA,SACjB,OAAO,sBAAMC,UAAU,QAAhB,SAAyBD,KAEf,SAAC,GAAkB,IAAhBA,EAAe,EAAfA,SACpB,OAAO,sBAAMC,UAAU,WAAhB,SAA4BD,KAElB,SAAC,GAAkB,IAAhBA,EAAe,EAAfA,SACpB,OAAO,sBAAMC,UAAU,WAAhB,SAA4BD,KAKnB,SAAC,GAAkB,IAAhBA,EAAe,EAAfA,SACnB,OAAO,sBAAMC,UAAU,UAAhB,SAA2BD,KAJnB,SAAC,GAAkB,IAAhBA,EAAe,EAAfA,SAClB,OAAO,sBAAMC,UAAU,SAAhB,SAA0BD,KAKlB,SAAC,GAAkB,IAAhBA,EAAe,EAAfA,SAClB,OAAO,sBAAMC,UAAU,SAAhB,SAA0BD,KAEhB,SAAC,GAAkB,IAAhBA,EAAe,EAAfA,SACpB,OAAO,sBAAMC,UAAU,WAAhB,SAA4BD,MAyDtBG,MApDf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEWF,mBAAS,IAFpB,mBAENG,EAFM,KAEAC,EAFA,OAGSJ,mBAAuB,MAHhC,mBAGNK,EAHM,KAGDC,EAHC,KAIPC,EAAYC,mBAChB,kBACEL,EAAKM,MAAM,IAAIC,KAAI,SAACC,EAAMC,GACxB,OAAQD,GACN,IAAK,IACH,OAAO,+BAAmBA,GAARC,GACpB,IAAK,IACH,OAAO,cAAC,EAAD,UAAoBD,GAARC,GACrB,QACE,IAAMC,EAAQf,EAAOc,EAAQ,GAC7B,OAAO,cAACC,EAAD,UAAoBF,GAARC,SAI3B,CAACT,IAoBH,OAjBAW,qBAAU,WACR,IAAMC,EAAOC,OAAOC,SAASF,KAAKG,MAAM,GACpCH,GACFb,EAAUa,KAEX,IAEHD,qBAAU,WACHb,GAGAkB,MAAMlB,GACRmB,MAAK,SAACC,GAAD,OAAUA,EAAKlB,UACpBiB,MAAK,SAACjB,GAAD,OAAUC,EAAQkB,KAAKC,UAAUpB,EAAM,KAAM,OAClDqB,OAAM,SAACnB,GAAD,OAASC,EAAOD,QACxB,CAACJ,IAGF,sBAAKJ,UAAU,MAAf,UACGM,EACC,8BACE,+BAAOI,MAGT,uEAEDF,GAAO,0CAAaA,EAAIoB,eC/DhBC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.647cb56c.chunk.js","sourcesContent":["import { FC, useEffect, useMemo, useState } from \"react\";\nimport \"./App.css\";\n\nconst White: FC = ({ children }) => {\n  return <span className=\"c-white\">{children}</span>;\n};\nconst Red: FC = ({ children }) => {\n  return <span className=\"c-red\">{children}</span>;\n};\nconst Orange: FC = ({ children }) => {\n  return <span className=\"c-orange\">{children}</span>;\n};\nconst Yellow: FC = ({ children }) => {\n  return <span className=\"c-yellow\">{children}</span>;\n};\nconst Aqua: FC = ({ children }) => {\n  return <span className=\"c-aqua\">{children}</span>;\n};\nconst Green: FC = ({ children }) => {\n  return <span className=\"c-green\">{children}</span>;\n};\nconst Blue: FC = ({ children }) => {\n  return <span className=\"c-blue\">{children}</span>;\n};\nconst Purple: FC = ({ children }) => {\n  return <span className=\"c-purple\">{children}</span>;\n};\n\nconst Colors = [Red, Orange, Yellow, Green, Aqua, Blue, Purple];\n\nfunction App() {\n  const [srcUrl, setSrcUrl] = useState(\"\");\n  const [json, setJson] = useState(\"\");\n  const [err, setErr] = useState<Error | null>(null);\n  const colorized = useMemo(\n    () =>\n      json.split(\"\").map((char, index) => {\n        switch (char) {\n          case \" \":\n            return <span key={index}>{char}</span>;\n          case '\"':\n            return <White key={index}>{char}</White>;\n          default: {\n            const Color = Colors[index % 7];\n            return <Color key={index}>{char}</Color>;\n          }\n        }\n      }),\n    [json]\n  );\n\n  useEffect(() => {\n    const hash = window.location.hash.slice(1);\n    if (hash) {\n      setSrcUrl(hash);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!srcUrl) {\n      return;\n    }\n    void fetch(srcUrl)\n      .then((resp) => resp.json())\n      .then((json) => setJson(JSON.stringify(json, null, 2)))\n      .catch((err) => setErr(err));\n  }, [srcUrl]);\n\n  return (\n    <div className=\"App\">\n      {json ? (\n        <pre>\n          <code>{colorized}</code>\n        </pre>\n      ) : (\n        <p>Set JSON URL to URL hash of this page.</p>\n      )}\n      {err && <div>Error: {err.message}</div>}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}